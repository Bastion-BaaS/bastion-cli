AWSTemplateFormatVersion: 2010-09-09
Parameters:
  Region:
    Type: String
    Default: us-east-1
  InfraName:
    Type: String
    Default: BastionInitial
  AdminAppImage:
    Type: String
    Default: 'public.ecr.aws/y7d9d7k6/admin-app:0.11.0'
Resources:
  BastionVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.16.0.0/16
      EnableDnsHostnames: 'true'
      EnableDnsSupport: 'true'
      Tags:
        - Key: stack
          Value: Bastion
        - Key: name
          Value: !Ref InfraName
    DependsOn:
      - BastionIGW
  BastionIGW:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: stack
          Value: Bastion
        - Key: name
          Value: !Ref InfraName
  VPCRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref BastionVPC
      Tags:
        - Key: stack
          Value: Bastion
        - Key: name
          Value: !Ref InfraName
  BastionGWAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      InternetGatewayId: !Ref BastionIGW
      VpcId:
        Ref: BastionVPC
    DependsOn:
      - VPCRouteTable
  BastionGWRoute:
    Type: 'AWS::EC2::Route'
    DependsOn:
      - VPCRouteTable
      - BastionGWAttachment
      - BastionIGW
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref VPCRouteTable
      GatewayId: !Ref BastionIGW
  DBTier:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref BastionVPC
      AvailabilityZone: !Sub "${AWS::Region}a"
      CidrBlock: 10.16.0.0/20
      Tags:
        - Key: stack
          Value: Bastion
        - Key: name
          Value: !Ref InfraName
    DependsOn:
      - BastionVPC
  AppTier:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref BastionVPC
      AvailabilityZone: !Sub "${AWS::Region}a"
      CidrBlock: 10.16.16.0/20
      Tags:
        - Key: stack
          Value: Bastion
        - Key: name
          Value: !Ref InfraName
  WebTier1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref BastionVPC
      AvailabilityZone: !Sub "${AWS::Region}a"
      CidrBlock: 10.16.32.0/20
      Tags:
        - Key: stack
          Value: Bastion
        - Key: name
          Value: !Ref InfraName
  WebTier2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref BastionVPC
      AvailabilityZone: !Sub "${AWS::Region}b"
      CidrBlock: 10.16.48.0/20
      Tags:
        - Key: stack
          Value: Bastion
        - Key: name
          Value: !Ref InfraName
  WebTier1VPCRTAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref WebTier1
      RouteTableId: !Ref VPCRouteTable
  WebTier2VPCRTAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref WebTier2
      RouteTableId: !Ref VPCRouteTable
  AdminAppCluster:
    Type: 'AWS::ECS::Cluster'
    Properties:
      ClusterName: AdminAppCluster
      ClusterSettings:
        - Name: containerInsights
          Value: enabled
      Tags:
        - Key: stack
          Value: Bastion
        - Key: name
          Value: !Ref InfraName
  AdminAppLG:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      RetentionInDays: 14
  AppServerLG:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Ref 'AWS::StackName'
      RetentionInDays: 14
  SGAdminApp:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref BastionVPC
      GroupName: SGAdminApp
      GroupDescription: Bastion security group for the Admin App
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 8080
          Description: Allow inbound traffic
          SourceSecurityGroupId: !Ref SGALB
      Tags:
        - Key: stack
          Value: Bastion
        - Key: name
          Value: !Ref InfraName
  RoleAdminApp:
    Type: 'AWS::IAM::Role'
    Properties:
      Tags:
        - Key: stack
          Value: Bastion
        - Key: name
          Value: !Ref InfraName
      RoleName: RoleAdminApp
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: BastionTaskExecutionPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'ecr:GetAuthorizationToken'
                  - 'ecr:BatchCheckLayerAvailability'
                  - 'ecr:GetDownloadUrlForLayer'
                  - 'ecr:BatchGetImage'
                  - 'ecr:GetDownloadUrlForLayer'
                  - 'ecr:BatchGetImage'
                  - 'ecr:BatchCheckLayerAvailability'
                  - 'ecr:PutImage'
                  - 'ecr:InitiateLayerUpload'
                  - 'ecr:UploadLayerPart'
                  - 'ecr:CompleteLayerUpload'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'ecs:*'
                Resource: '*'
        - PolicyName: CCFLambdaPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 'lambda:*'
                Resource: '*'
        - PolicyName: AdminAppAdminPolicy 
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: '*'
                Resource: '*'
  AdminAppTaskDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt RoleAdminApp.Arn
      TaskRoleArn: !GetAtt RoleAdminApp.Arn
      Cpu: 256
      Memory: 512
      NetworkMode: awsvpc
      ContainerDefinitions:
        - Name: AdminApp
          Essential: true
          Image: !Ref AdminAppImage
          PortMappings:
            - ContainerPort: 3001
              HostPort: 3001
          Environment:
            - Name: VpcId
              Value: !Ref BastionVPC
            - Name: DBTierSubnet
              Value: !Ref DBTier
            - Name: AppTierSubnet
              Value: !Ref AppTier
            - Name: EFSSecurityGroup
              Value: !Ref EFSSecurityGroup
            - Name: SGAppServer
              Value: !Ref SGAppServer
            - Name: SGDBServer
              Value: !Ref SGAppServer
            - Name: AppServerIAMRole
              Value: !Ref RoleAppServer
            - Name: DBServerIAMRole
              Value: !Ref RoleDBServer
            - Name: AppServerIAMRoleArn
              Value: !GetAtt RoleAppServer.Arn
            - Name: DBServerIAMRoleArn
              Value: !GetAtt RoleDBServer.Arn
            - Name: ALBListener
              Value: !Ref ALBListener
            - Name: AppServerLG
              Value: !Ref AppServerLG
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref 'AWS::Region'
              awslogs-group: !Ref AdminAppLG
              awslogs-stream-prefix: ecs
        - Name: admin-db
          Essential: true
          Image: 'mongo:latest'
          PortMappings:
            - ContainerPort: 27017 
              HostPort: 27017
          Environment:
            - Name: MONGO_INITDB_ROOT_PASSWORD
              Value: password
            - Name: MONGO_INITDB_ROOT_USERNAME
              Value: admin-app
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref AdminAppLG
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: ecs
          MountPoints:
            - ContainerPath: /data/db
              SourceVolume: admin-mongo-efs-volume
      Volumes:
        - Name: admin-mongo-efs-volume
          EFSVolumeConfiguration:
            FilesystemId: !Ref AdminEFS
    DependsOn:
      - AdminAppLG
      - AdminEFS
      - AdminMountTarget
  AdminAppService:
    Type: 'AWS::ECS::Service'
    Properties:
      LaunchType: FARGATE
      Cluster: !Ref AdminAppCluster
      DesiredCount: 1
      TaskDefinition: !Ref AdminAppTaskDefinition
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          Subnets:
            - !Ref AppTier
          SecurityGroups:
            - !GetAtt SGAdminApp.GroupId
      LoadBalancers:
        - ContainerPort: 3001
          ContainerName: AdminApp
          TargetGroupArn:
            Ref: AdminAppTargetGroup
    DependsOn:
      - ALBListener
      - ALB
  ALB:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Type: application
      Tags:
        - Key: stack
          Value: Bastion
        - Key: name
          Value: !Ref InfraName
      Scheme: internet-facing
      Subnets:
        - !Ref WebTier1
        - !Ref WebTier2
      SecurityGroups:
        - !Ref SGALB
    DependsOn:
      - BastionIGW
      - BastionGWRoute
      - BastionGWAttachment
      - WebTier1
      - WebTier2
  SGALB:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref BastionVPC
      Tags:
        - Key: stack
          Value: bastion
        - Key: name
          Value: !Ref InfraName
      GroupName: SGALB
      GroupDescription: Bastion ALB Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 3001
          ToPort: 3001
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 3001
          ToPort: 3001
          CidrIp: 0.0.0.0/0
  AdminAppTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      VpcId: !Ref BastionVPC
      Tags:
        - Key: stack
          Value: bastion
        - Key: name
          Value: !Ref InfraName
      Name: AdminAppTargetGroup
      HealthCheckEnabled: true
      Port: 3001
      Protocol: HTTP
      TargetType: ip
  WT1NATGateway:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt NATEIP.AllocationId
      SubnetId: !Ref WebTier1
    DependsOn:
      - WebTier1
  NATEIP:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
  AppTierRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref BastionVPC
      Tags:
        - Key: stack
          Value: Bastion
        - Key: name
          Value: !Ref InfraName
  NATGatewayRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref AppTierRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref WT1NATGateway
  AppTierRTAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref AppTier
      RouteTableId: !Ref AppTierRouteTable
  ALBListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
            ContentType: text/plain
            StatusCode: "404"
            MessageBody: You dont have any Bastion instances here
    DependsOn:
      - ALB
  AdminAppALBListenerRule:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      ListenerArn: !Ref ALBListener
      Priority: 1
      Conditions:
        - Field: path-pattern
          PathPatternConfig:
            Values:
              - /admin/*
      Actions:
        - Type: forward
          ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Ref AdminAppTargetGroup
                Weight: 1
  RoleCCF:
    Type: 'AWS::IAM::Role'
    Properties:
      Tags:
        - Key: stack
          Value: Bastion
        - Key: name
          Value: !Ref InfraName
      RoleName: RoleCCF
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: CCFLambdaExecutionPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource:
                  - '*'
  RoleAppServer:
    Type: 'AWS::IAM::Role'
    Properties:
      Tags:
        - Key: stack
          Value: Bastion
        - Key: name
          Value: !Ref InfraName
      RoleName: RoleAppServer
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: AdminAppExecutionPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'ecr:GetAuthorizationToken'
                  - 'ecr:BatchCheckLayerAvailability'
                  - 'ecr:GetDownloadUrlForLayer'
                  - 'ecr:BatchGetImage'
                  - 'ecr:GetDownloadUrlForLayer'
                  - 'ecr:BatchGetImage'
                  - 'ecr:BatchCheckLayerAvailability'
                  - 'ecr:PutImage'
                  - 'ecr:InitiateLayerUpload'
                  - 'ecr:UploadLayerPart'
                  - 'ecr:CompleteLayerUpload'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'ecs:*'
                Resource: '*'
        - PolicyName: AppServerLambdaExecutionPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 'lambda:*'
                Resource: '*'
        - PolicyName: AppServerAdminPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: '*'
                Resource: '*'
  RoleDBServer:
    Type: 'AWS::IAM::Role'
    Properties:
      Tags:
        - Key: stack
          Value: Bastion
        - Key: name
          Value: !Ref InfraName
      RoleName: RoleDBServer
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: DBServerRolePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: '*'
                Resource: '*'
  SGCCF:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Security Group for Cloud Code Functions
      VpcId: !Ref BastionVPC
      Tags:
        - Key: stack
          Value: bastion
        - Key: name
          Value: !Ref InfraName
      GroupName: SGCCF
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
  SGAppServer:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: SGAppServer
      GroupDescription: Security Group for BaaS instance App Server
      VpcId: !Ref BastionVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 30000
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 30000
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: stack
          Value: bastion
        - Key: name
          Value: !Ref InfraName
  SGDBServer:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: SGDBServer
      GroupDescription: Security Group for BaaS instance DB Server
      VpcId: !Ref BastionVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 30000
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 30000
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: stack
          Value: bastion
        - Key: name
          Value: !Ref InfraName
  EFSSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 30000
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 30000
          CidrIp: 0.0.0.0/0
      VpcId: !Ref BastionVPC
      GroupDescription: Test
  AdminEFS:
    Type: 'AWS::EFS::FileSystem'
    Properties:
      Encrypted: true
      PerformanceMode: generalPurpose
  AdminMountTarget:
    Type: 'AWS::EFS::MountTarget'
    Properties:
      FileSystemId: !Ref AdminEFS
      SecurityGroups:
        - !Ref EFSSecurityGroup
      SubnetId: !Ref AppTier
    DependsOn:
      - AdminEFS
      - EFSSecurityGroup
Outputs:
  ALBDomain:
    Description: Application Load Balancer Domain Name
    Value: !GetAtt ALB.DNSName
